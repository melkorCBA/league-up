import Head from "next/head";
import Table from "../components/table";
import CurrentMatch from "../components/views/CurrentMatch/CurrentMatch";
import { CLIENT_ENVIRONMENT, CONSTANTS } from "../lib/util";
import styles from "../styles/Home.module.css";
import { axiosClient } from "../lib/apiClient";
import useLive from "../hooks/useLive";
import {
  dashboardService,
  leagueService,
  matchService,
  teamService,
} from "../services/api-service";

export default function Home({ intialData, clientenvs }) {
  const { leagueInView, view, teams, matchInView } = useLive(
    intialData,
    clientenvs
  );

  const dashboardView = () => {
    if (view === CONSTANTS.VIEWS.STANDINGS) {
      return <Table teams={teams} />;
    } else {
      return <CurrentMatch match={matchInView} matchView={view} />;
    }
  };

  return (
    <div className={styles.container + " " + "standings-container"}>
      <Head>
        <title>{leagueInView && leagueInView["name"]}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container-fluid d-flex flex-column align-items-center dashBoard-container">
        <div className="d-flex justify-content-center w-100 py-4">
          <h1>{leagueInView && leagueInView["name"]}</h1>
        </div>
        {dashboardView()}
      </main>
    </div>
  );
}

export async function getServerSideProps(context) {
  // Fetch data from external API
  const envs = CLIENT_ENVIRONMENT;
  const axios = axiosClient(context.req);

  try {
    const dashboard = await dashboardService.getDashboard({}, axios);
    const teams = await teamService.getTeams({}, axios);
    const leagueInView = await leagueService.getLeague(dashboard.league, axios);
    const matchInView = await matchService.getMatch(
      dashboard.currentMatch,
      axios
    );
    return {
      props: {
        intialData: {
          dashboard,
          leagueInView,
          teams,
          matchInView,
        },
        clientenvs: envs,
      },
    };
  } catch (err) {
    return {
      redirect: {
        destination: "/auth/signin",
        permanent: false,
      },
    };
  }
}
