import React, { useEffect, useState } from "react";
import UpdateGrid from "../components/updateGrid";
import Head from "next/head";
import {
  session,
  ENVIRONMENT,
  setClientenvsInSession,
  CLIENT_ENVIRONMENT,
  CONSTANTS,
} from "../lib/util";
import ViewSelector from "../components/views/ViewSelector";
import CurrentMatch from "../components/views/CurrentMatch/CurrentMatch";
import useDashboard from "../hooks/useDashboard";
import { useRouter } from "next/router";
import { axiosClient } from "../lib/apiClient";
import DropdownSelect from "../components/shared/DropdownSelect";
import {
  leagueService,
  viewService,
  dashboardService,
  teamService,
  matchService,
} from "../services/api-service";
import useModal from "../hooks/useModal";
import Modal from "../components/shared/Modal";
import LegaueInViewModal from "../components/modals/LegaueInViewModal";

export default function Admin({ initialData, clientenvs }) {
  //const leagueInView = leagues?.filter((l) => l.default)[0];

  const {
    leagueSelected,
    leagueInView,
    teams,
    view,
    updateLeagueSelected,
    updateView,
    matchInView,
    updateLeagueInView,
  } = useDashboard({
    initialData,
    clientenvs,
  });
  const router = useRouter();
  const { open } = useModal("UserDashboardModal");
  const openUserDashboardModal = () => {
    open();
  };
  return (
    <div className="container-fluid container-admin">
      <Head>
        <title>Admin Panel</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-100">
        <div className="my-3 d-flex gap-2">
          <h1>Admin Panel</h1>
          <span
            title="click update league-in-view details"
            className="align-self-center badge bg-white text-dark league-in-view-update-btn"
            onClick={openUserDashboardModal}
          >
            league in View : {leagueInView?.name}
          </span>
          <LegaueInViewModal />
        </div>

        <div className="d-flex gap-4">
          <label
            htmlFor="admin-league-selector-dropdown"
            className="mx-2align-self-center pt-1"
          >
            Leagues:
          </label>
          <div>
            <DropdownSelect
              id="admin-league-selector-dropdown"
              value={leagueSelected}
              items={initialData.leagues}
              onChange={(item) => updateLeagueSelected(item)}
              ukey={"_id"}
              displayKey={"name"}
            />
          </div>
        </div>

        <UpdateGrid data={teams} league={leagueSelected} />
        <div className="row justify-content-md-center">
          <div className="col-md-8 col-12">
            <ViewSelector
              views={initialData.views}
              view={view}
              onViewSelectorChnage={updateView}
            />
          </div>
          <div className="col-md-4 col-12">
            <h3 className="text-center">Current Preview</h3>
            <div className="m-1">
              <CurrentMatch
                match={matchInView}
                matchView={view}
                miniView={true}
              />
              <button
                hidden={view === CONSTANTS.VIEWS.STANDINGS}
                className="btn btn-outline-secondary btn-block w-100"
                onClick={() =>
                  router.push({
                    pathname: "/matches",
                    query: { leagueId: leagueSelected?._id },
                  })
                }
              >
                Matches
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export async function getServerSideProps(context) {
  const envs = CLIENT_ENVIRONMENT;
  const axios = axiosClient(context.req);
  try {
    const dashboard = await dashboardService.getDashboard({}, axios);
    const teams = await teamService.getTeams(null, axios);
    const leagueInView = await leagueService.getLeague(dashboard.league, axios);
    let matchInView = {}
    if(dashboard.currentMatch) {
      matchInView = await matchService.getMatch(
        dashboard.currentMatch,
        axios
      );
    }
    
    const leagues = await leagueService.getLeagues(axios);
    const views = await viewService.getViews(axios);

    // Pass data to the page via props
    return {
      props: {
        initialData: {
          leagues,
          teams,
          dashboard,
          leagueInView,
          matchInView,
          views,
        },
        clientenvs: envs,
      },
    };
  } catch (err) {
    return {
      redirect: {
        destination: "/auth/signin",
        permanent: false,
      },
    };
  }
}
